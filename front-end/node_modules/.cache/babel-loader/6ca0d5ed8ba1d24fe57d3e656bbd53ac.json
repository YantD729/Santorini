{"ast":null,"code":"var _jsxFileName = \"/Users/dengyanting/Documents/GitHub/hw3-santorini-YantD729/front-end/src/App.tsx\";\nimport React from 'react';\nimport './App.css'; // import the css file to enable your styles.\n\nimport BoardCell from './Cell';\n/**\n * Define the type of the props field for a React component\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * Using generics to specify the type of props and state.\n * props and state is a special field in a React component.\n * React will keep track of the value of props and state.\n * Any time there's a change to their values, React will\n * automatically update (not fully re-render) the HTML needed.\n * \n * props and state are similar in the sense that they manage\n * the data of this component. A change to their values will\n * cause the view (HTML) to change accordingly.\n * \n * Usually, props is passed and changed by the parent component;\n * state is the internal value of the component and managed by\n * the component itself.\n */\nclass App extends React.Component {\n  /**\n   * @param props has type Props\n   */\n  constructor(props) {\n    super(props);\n    /**\n     * state has type GameState as specified in the class inheritance.\n     */\n\n    this.initialized = false;\n\n    this.newGame = async () => {\n      const response = await fetch('/newgame');\n      const json = await response.json();\n      this.setState({\n        cells: json['cells']\n      });\n    };\n\n    this.state = {\n      cells: []\n    };\n  }\n  /**\n   * Use arrow function, i.e., () => {} to create an async function,\n   * otherwise, 'this' would become undefined in runtime. This is\n   * just an issue of Javascript.\n   */\n\n\n  /**\n   * play will generate an anonymous function that the component\n   * can bind with.\n   * @param x \n   * @param y \n   * @returns \n   */\n  play(x, y) {\n    return async e => {\n      // prevent the default behavior on clicking a link; otherwise, it will jump to a new page.\n      e.preventDefault();\n      const response = await fetch(`/play?x=${x}&y=${y}`);\n      const json = await response.json();\n      this.setState({\n        cells: json['cells']\n      });\n    };\n  }\n\n  createCell(cell, index) {\n    if (cell.playable)\n      /**\n       * key is used for React when given a list of items. It\n       * helps React to keep track of the list items and decide\n       * which list item need to be updated.\n       * @see https://reactjs.org/docs/lists-and-keys.html#keys\n       */\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/\",\n          onClick: this.play(cell.x, cell.y),\n          children: /*#__PURE__*/_jsxDEV(BoardCell, {\n            cell: cell\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this);else return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(BoardCell, {\n        cell: cell\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 26\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this);\n  }\n  /**\n   * This function will call after the HTML is rendered.\n   * We update the initial state by creating a new game.\n   * @see https://reactjs.org/docs/react-component.html#componentdidmount\n   */\n\n\n  componentDidMount() {\n    /**\n     * setState in DidMount() will cause it to render twice which may cause\n     * this function to be invoked twice. Use initialized to avoid that.\n     */\n    if (!this.initialized) {\n      this.newGame();\n      this.initialized = true;\n    }\n  }\n  /**\n   * The only method you must define in a React.Component subclass.\n   * @returns the React element via JSX.\n   * @see https://reactjs.org/docs/react-component.html\n   */\n\n\n  render() {\n    /**\n     * We use JSX to define the template. An advantage of JSX is that you\n     * can treat HTML elements as code.\n     * @see https://reactjs.org/docs/introducing-jsx.html\n     */\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"board\",\n        children: this.state.cells.map((cell, i) => this.createCell(cell, i))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"bottombar\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick:\n          /* get the function, not call the function */\n          this.newGame,\n          children: \"New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","BoardCell","App","Component","constructor","props","initialized","newGame","response","fetch","json","setState","cells","state","play","x","y","e","preventDefault","createCell","cell","index","playable","componentDidMount","render","map","i"],"sources":["/Users/dengyanting/Documents/GitHub/hw3-santorini-YantD729/front-end/src/App.tsx"],"sourcesContent":["import React from 'react';\nimport './App.css'; // import the css file to enable your styles.\nimport { GameState, Cell } from './game';\nimport BoardCell from './Cell';\n\n/**\n * Define the type of the props field for a React component\n */\ninterface Props { }\n\n/**\n * Using generics to specify the type of props and state.\n * props and state is a special field in a React component.\n * React will keep track of the value of props and state.\n * Any time there's a change to their values, React will\n * automatically update (not fully re-render) the HTML needed.\n * \n * props and state are similar in the sense that they manage\n * the data of this component. A change to their values will\n * cause the view (HTML) to change accordingly.\n * \n * Usually, props is passed and changed by the parent component;\n * state is the internal value of the component and managed by\n * the component itself.\n */\nclass App extends React.Component<Props, GameState> {\n  private initialized: boolean = false;\n\n  /**\n   * @param props has type Props\n   */\n  constructor(props: Props) {\n    super(props)\n    /**\n     * state has type GameState as specified in the class inheritance.\n     */\n    this.state = { cells: [] }\n  }\n\n  /**\n   * Use arrow function, i.e., () => {} to create an async function,\n   * otherwise, 'this' would become undefined in runtime. This is\n   * just an issue of Javascript.\n   */\n  newGame = async () => {\n    const response = await fetch('/newgame');\n    const json = await response.json();\n    this.setState({ cells: json['cells'] });\n  }\n\n  /**\n   * play will generate an anonymous function that the component\n   * can bind with.\n   * @param x \n   * @param y \n   * @returns \n   */\n  play(x: number, y: number): React.MouseEventHandler {\n    return async (e) => {\n      // prevent the default behavior on clicking a link; otherwise, it will jump to a new page.\n      e.preventDefault();\n      const response = await fetch(`/play?x=${x}&y=${y}`)\n      const json = await response.json();\n      this.setState({ cells: json['cells'] });\n    }\n  }\n\n  createCell(cell: Cell, index: number): React.ReactNode {\n    if (cell.playable)\n      /**\n       * key is used for React when given a list of items. It\n       * helps React to keep track of the list items and decide\n       * which list item need to be updated.\n       * @see https://reactjs.org/docs/lists-and-keys.html#keys\n       */\n      return (\n        <div key={index}>\n          <a href='/' onClick={this.play(cell.x, cell.y)}>\n            <BoardCell cell={cell}></BoardCell>\n          </a>\n        </div>\n      )\n    else\n      return (\n        <div key={index}><BoardCell cell={cell}></BoardCell></div>\n      )\n  }\n\n  /**\n   * This function will call after the HTML is rendered.\n   * We update the initial state by creating a new game.\n   * @see https://reactjs.org/docs/react-component.html#componentdidmount\n   */\n  componentDidMount(): void {\n    /**\n     * setState in DidMount() will cause it to render twice which may cause\n     * this function to be invoked twice. Use initialized to avoid that.\n     */\n    if (!this.initialized) {\n      this.newGame();\n      this.initialized = true;\n    }\n  }\n\n  /**\n   * The only method you must define in a React.Component subclass.\n   * @returns the React element via JSX.\n   * @see https://reactjs.org/docs/react-component.html\n   */\n  render(): React.ReactNode {\n    /**\n     * We use JSX to define the template. An advantage of JSX is that you\n     * can treat HTML elements as code.\n     * @see https://reactjs.org/docs/introducing-jsx.html\n     */\n    return (\n      <div>\n        <div id=\"board\">\n          {this.state.cells.map((cell, i) => this.createCell(cell, i))}\n        </div>\n        <div id=\"bottombar\">\n          <button onClick={/* get the function, not call the function */this.newGame}>New Game</button>\n          {/* Exercise: implement Undo function */}\n          <button>Undo</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}