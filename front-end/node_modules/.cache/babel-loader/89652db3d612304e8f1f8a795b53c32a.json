{"ast":null,"code":"var _jsxFileName = \"/Users/dengyanting/Documents/GitHub/hw3-santorini-YantD729/front-end/src/App.tsx\";\nimport React from 'react';\nimport './App.css'; // import the css file to enable your styles.\n\nimport BoardGrid from './Grid';\n/**\n * Define the type of the props field for a React component\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * Using generics to specify the type of props and state.\n * props and state is a special field in a React component.\n * React will keep track of the value of props and state.\n * Any time there's a change to their values, React will\n * automatically update (not fully re-render) the HTML needed.\n * \n * props and state are similar in the sense that they manage\n * the data of this component. A change to their values will\n * cause the view (HTML) to change accordingly.\n * \n * Usually, props is passed and changed by the parent component;\n * state is the internal value of the component and managed by\n * the component itself.\n */\nclass App extends React.Component {\n  /**\n   * @param props has type Props\n   */\n  constructor(props) {\n    super(props);\n    /**\n     * state has type GameState as specified in the class inheritance.\n     */\n    // this.state = { grids: [], winner: null, currPlayer: null, gameWin: false, msg: '' }\n\n    this.initialized = false;\n\n    this.newGame = async () => {\n      const response = await fetch('/newgame');\n      const json = await response.json();\n      this.setState({\n        grids: json.cells,\n        currPlayer: json.currPlayer,\n        winner: json.winner,\n        msg: json.message\n      });\n      console.log(json);\n      console.log(this.state.grids);\n    };\n\n    this.undo = async () => {\n      const response = await fetch('/undo');\n      const json = await response.json();\n      this.setState(json);\n    };\n\n    this.state = {\n      grids: [],\n      currPlayer: null,\n      winner: null,\n      msg: ''\n    };\n  }\n  /**\n   * Use arrow function, i.e., () => {} to create an async function,\n   * otherwise, 'this' would become undefined in runtime. This is\n   * just an issue of Javascript.\n   */\n\n\n  /**\n   * play will generate an anonymous function that the component\n   * can bind with.\n   * @param x \n   * @param y \n   * @returns \n   */\n  play(x, y) {\n    return async e => {\n      // prevent the default behavior on clicking a link; otherwise, it will jump to a new page.\n      e.preventDefault();\n      const response = await fetch(`/play?x=${x}&y=${y}`);\n      const json = await response.json();\n      this.setState({\n        grids: json.cells,\n        currPlayer: json.currPlayer,\n        winner: json.winner,\n        msg: json.message\n      });\n      console.log(json);\n      console.log(this.state.grids);\n    };\n  }\n\n  creategrid(grid, index) {\n    if (grid.playable)\n      /**\n       * key is used for React when given a list of items. It\n       * helps React to keep track of the list items and decide\n       * which list item need to be updated.\n       * @see https://reactjs.org/docs/lists-and-keys.html#keys\n       */\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/\",\n          onClick: this.play(grid.x, grid.y),\n          children: /*#__PURE__*/_jsxDEV(BoardGrid, {\n            grid: grid\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this);else return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(BoardGrid, {\n        grid: grid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 26\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this);\n  } // Just an Instruction part on the top\n\n\n  createInstruction() {\n    if (this.state.winner !== null && this.state.winner != \"null\") {\n      return `Player ${this.state.winner} wins!`;\n    } else if (this.state.currPlayer !== null) {\n      return `It is Player${this.state.currPlayer}'s turn.\n              ${this.state.msg}`;\n    }\n  }\n  /**\n   * This function will call after the HTML is rendered.\n   * We update the initial state by creating a new game.\n   * @see https://reactjs.org/docs/react-component.html#componentdidmount\n   */\n\n\n  componentDidMount() {\n    /**\n     * setState in DidMount() will cause it to render twice which may cause\n     * this function to be invoked twice. Use initialized to avoid that.\n     */\n    if (!this.initialized) {\n      this.newGame();\n      this.initialized = true;\n    }\n  }\n  /**\n   * The only method you must define in a React.Component subclass.\n   * @returns the React element via JSX.\n   * @see https://reactjs.org/docs/react-component.html\n   */\n\n\n  render() {\n    /**\n     * We use JSX to define the template. An advantage of JSX is that you\n     * can treat HTML elements as code.\n     * @see https://reactjs.org/docs/introducing-jsx.html\n     */\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"instructions\",\n        children: this.createInstruction()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"board\",\n        children: this.state.grids.map((grid, i) => this.creategrid(grid, i))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"bottombar\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-dark btn-lg download-button\",\n          type: \"button\",\n          onClick: this.newGame,\n          children: \"New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-light btn-lg download-button\",\n          type: \"button\",\n          onClick: this.undo,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","BoardGrid","App","Component","constructor","props","initialized","newGame","response","fetch","json","setState","grids","cells","currPlayer","winner","msg","message","console","log","state","undo","play","x","y","e","preventDefault","creategrid","grid","index","playable","createInstruction","componentDidMount","render","map","i"],"sources":["/Users/dengyanting/Documents/GitHub/hw3-santorini-YantD729/front-end/src/App.tsx"],"sourcesContent":["import React from 'react';\nimport './App.css'; // import the css file to enable your styles.\nimport { GameState, Grid } from './game';\nimport BoardGrid from './Grid';\n\n\n/**\n * Define the type of the props field for a React component\n */\ninterface Props { }\n\n/**\n * Using generics to specify the type of props and state.\n * props and state is a special field in a React component.\n * React will keep track of the value of props and state.\n * Any time there's a change to their values, React will\n * automatically update (not fully re-render) the HTML needed.\n * \n * props and state are similar in the sense that they manage\n * the data of this component. A change to their values will\n * cause the view (HTML) to change accordingly.\n * \n * Usually, props is passed and changed by the parent component;\n * state is the internal value of the component and managed by\n * the component itself.\n */\nclass App extends React.Component<Props, GameState> {\n  private initialized: boolean = false;\n\n  /**\n   * @param props has type Props\n   */\n  constructor(props: Props) {\n    super(props)\n    /**\n     * state has type GameState as specified in the class inheritance.\n     */\n    // this.state = { grids: [], winner: null, currPlayer: null, gameWin: false, msg: '' }\n    this.state = { grids: [], currPlayer: null, winner: null, msg: '' }\n  }\n\n  /**\n   * Use arrow function, i.e., () => {} to create an async function,\n   * otherwise, 'this' would become undefined in runtime. This is\n   * just an issue of Javascript.\n   */\n  newGame = async () => {\n    const response = await fetch('/newgame');\n    const json = await response.json();\n    this.setState({\n      grids: json.cells,\n      currPlayer: json.currPlayer,\n      winner: json.winner,\n      msg: json.message\n    });\n    console.log(json);\n    console.log(this.state.grids)\n  }\n\n  /**\n   * play will generate an anonymous function that the component\n   * can bind with.\n   * @param x \n   * @param y \n   * @returns \n   */\n  play(x: number, y: number): React.MouseEventHandler {\n    return async (e) => {\n      // prevent the default behavior on clicking a link; otherwise, it will jump to a new page.\n      e.preventDefault();\n      const response = await fetch(`/play?x=${x}&y=${y}`)\n      const json = await response.json();\n      this.setState({\n        grids: json.cells,\n        currPlayer: json.currPlayer,\n        winner: json.winner,\n        msg: json.message\n      });\n      console.log(json);\n      console.log(this.state.grids)\n    }\n  }\n\n  undo = async () => {\n    const response = await fetch('/undo');\n    const json = await response.json();\n    this.setState(json);\n  }\n\n  creategrid(grid: Grid, index: number): React.ReactNode {\n    if (grid.playable)\n      /**\n       * key is used for React when given a list of items. It\n       * helps React to keep track of the list items and decide\n       * which list item need to be updated.\n       * @see https://reactjs.org/docs/lists-and-keys.html#keys\n       */\n      return (\n        <div key={index}>\n          <a href='/' onClick={this.play(grid.x, grid.y)}>\n            <BoardGrid grid={grid}></BoardGrid>\n          </a>\n        </div>\n      )\n    else\n      return (\n        <div key={index}><BoardGrid grid={grid}></BoardGrid></div>\n      )\n  }\n\n  // Just an Instruction part on the top\n  createInstruction(): React.ReactNode {\n    if (this.state.winner !== null && this.state.winner != \"null\") {\n      return `Player ${this.state.winner} wins!`\n    } else if (this.state.currPlayer !== null){\n      return `It is Player${this.state.currPlayer}'s turn.\n              ${this.state.msg}`\n\n    }\n  }\n\n  /**\n   * This function will call after the HTML is rendered.\n   * We update the initial state by creating a new game.\n   * @see https://reactjs.org/docs/react-component.html#componentdidmount\n   */\n  componentDidMount(): void {\n    /**\n     * setState in DidMount() will cause it to render twice which may cause\n     * this function to be invoked twice. Use initialized to avoid that.\n     */\n    if (!this.initialized) {\n      this.newGame();\n      this.initialized = true;\n    }\n  }\n\n  /**\n   * The only method you must define in a React.Component subclass.\n   * @returns the React element via JSX.\n   * @see https://reactjs.org/docs/react-component.html\n   */\n  render(): React.ReactNode {\n    /**\n     * We use JSX to define the template. An advantage of JSX is that you\n     * can treat HTML elements as code.\n     * @see https://reactjs.org/docs/introducing-jsx.html\n     */\n    return (\n      <div>\n        <div id=\"instructions\">{this.createInstruction()}</div>\n        <div id=\"board\">\n          {this.state.grids.map((grid, i) => this.creategrid(grid, i))}\n        </div>\n        <section id=\"bottombar\">\n          <button className=\"btn btn-dark btn-lg download-button\" type=\"button\" onClick={this.newGame}>New Game</button>\n          <button className=\"btn btn-light btn-lg download-button\" type=\"button\" onClick={this.undo}>Undo</button>\n\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}